AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Create service-health-metrics based on cloudwatch alarms.'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: mechanicalrock-ops-metrics
    Description: Creating service-health-metrics based on cloudwatch alarms.
    Author: Mechanical Rock
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['metrics', 'mttr', 'mtbf']
    HomePageUrl: https://github.com/MechanicalRock/aws-ops-metrics
    SemanticVersion: 1.7.1
    SourceCodeUrl: https://github.com/MechanicalRock/aws-ops-metrics

Parameters:
  AlarmNameBlackListPattern:
    Description: 'a regex pattern which would be matched agains alarm name in order to blacklist it from generating health metrics. Default pattern is set to filter Dynamodb autoscaling alarms'
    Type: String
    # Below default regex pattern matches the auto generated alarm names created by dynamodb's auto scaling
    Default: "(-AlarmHigh|-AlarmLow|-ProvisionedCapacityHigh|-ProvisionedCapacityLow)-(\\{){0,1}[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}(\\}){0,1}"
  PermissionsBoundary:
    Description: "An optional permissions boundary to apply to all roles"
    Type: String
    ConstraintDescription: Must match a valid ARN of an IAM policy for the permission boundary
    AllowedPattern: "^$|arn:aws:iam::\\d{12}:policy/[a-zA-Z\\-]+$"
    Default: ""

Conditions:
  HasPermissionBoundary: !Not [!Equals [!Ref PermissionsBoundary, ""]]

Resources:
  DescribeAlarmPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: cloudwatch:DescribeAlarmHistory
            Resource: '*'

  ListPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: codepipeline:ListPipelines
            Resource: '*'

  MTTREventHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Create CloudWatch mttr metric from cloudwatch alarm events
      Handler: mttr.handler
      Runtime: nodejs12.x
      CodeUri: .build/src
      Environment:
        Variables:
          ALARM_NAME_BLACKLIST_PATTERN: !Ref AlarmNameBlackListPattern
      Events:
        cloudwatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - 'aws.cloudwatch'
              detail-type:
                - 'CloudWatch Alarm State Change'
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - !Ref DescribeAlarmPolicy
      PermissionsBoundary:
        !If [HasPermissionBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]

  MTBFEventHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Create CloudWatch mtbf metric from cloudwatch alarm events
      Handler: mtbf.handler
      Runtime: nodejs12.x
      CodeUri: .build/src
      Environment:
        Variables:
          ALARM_NAME_BLACKLIST_PATTERN: !Ref AlarmNameBlackListPattern
      Events:
        cloudwatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - 'aws.cloudwatch'
              detail-type:
                - 'CloudWatch Alarm State Change'
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - !Ref DescribeAlarmPolicy
      PermissionsBoundary:
        !If [HasPermissionBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]

  MTTFEventHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Create CloudWatch mttf metric from cloudwatch alarm events
      Handler: mttf.handler
      Runtime: nodejs12.x
      CodeUri: .build/src
      Environment:
        Variables:
          ALARM_NAME_BLACKLIST_PATTERN: !Ref AlarmNameBlackListPattern
      Events:
        cloudwatchEvent:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - 'aws.cloudwatch'
              detail-type:
                - 'CloudWatch Alarm State Change'
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - !Ref DescribeAlarmPolicy
      PermissionsBoundary:
        !If [HasPermissionBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]

  OpsDashboardGenerator:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Build OPS Trend dashboard from CloudWatch metrics
      Handler: dashboardHandler.generateDashboardTrend
      Runtime: nodejs12.x
      CodeUri: .build/src
      Timeout: 60
      Events:
        DashboardEventRule:
          Type: Schedule
          Properties:
            Schedule: 'cron(*/5 * * * ? *)'
      Policies:
        - CloudWatchDashboardPolicy: {}
      PermissionsBoundary:
        !If [HasPermissionBoundary, !Ref PermissionsBoundary, !Ref AWS::NoValue]
